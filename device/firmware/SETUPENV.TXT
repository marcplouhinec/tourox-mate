How to setup the environment
============================

Summary
-------

1-Setup developement environment
2-Build a binary for BLE Nano
3-Use the Real Time Terminal


1-Setup developement environment
--------------------------------

Turorial at: https://devzone.nordicsemi.com/tutorials/7/development-with-gcc-and-eclipse/

Download http://developer.nordicsemi.com/nRF51_SDK/nRF51_SDK_v8.x.x/nRF51_SDK_8.1.0_b6ed55f.zip
Download https://launchpad.net/gcc-arm-embedded/4.9/4.9-2015-q3-update/+download/gcc-arm-none-eabi-4_9-2015q3-20150921-win32.exe
Download http://gnuwin32.sourceforge.net/downlinks/make.php
Download http://gnuwin32.sourceforge.net/downlinks/coreutils.php
Download http://www.nordicsemi.com/eng/nordic/download_resource/33444/15/46150749
Download https://www.segger.com/jlink-software.html?step=1&file=JLink_502e
Download https://download.segger.com/J-Link/J-LinkDebugger/J-LinkDebugger_Setup_Windows_V178.exe
Download http://www.eclipse.org/downloads/download.php?file=/technology/epp/downloads/release/kepler/SR2/eclipse-cpp-kepler-SR2-win32-x86_64.zip

Create a folder C:\nrf51workspace

Unzip nRF51_SDK_8.1.0_b6ed55f.zip into C:\nrf51workspace\nRF51_SDK_8.1.0.
Setup C:\nrf51workspace\nRF51_SDK_8.1.0\nRF_mdk_7_2_1.msi.

Setup gcc-arm-none-eabi-4_9-2015q3-20150921-win32.exe
At the end of the installation, select "Launch gccvar.bat", "Add path to environment variable" and "Add registry information".
Close the command line.

Setup make-3.81.exe
Setup coreutils-5.3.0.exe
Setup nRFTools_7_6_0_Installer.exe
Setup Setup_JLink_V502e.zip/Setup_JLink_V502e.exe
Setup J-LinkDebugger_Setup_Windows_V178.exe

Unzip Eclipse in C:\nrf51workspace (so the Eclipse binary path is C:\nrf51workspace\eclipse\eclipse.exe).
Start Eclipse and choose the workspace C:\nrf51workspace\eclipseworkspace.
Install the plugin embsysregview from http://embsysregview.sourceforge.net/update.
Copy C:\nrf51workspace\nRF51_SDK_8.1.0\SVD\nrf51.xml into C:\nrf51workspace\eclipse\plugins\org.eclipse.cdt.embsysregview.data_0.2.5.r180\data\cortex-m0\Nordic (create the Nordic forlder).
Install the plugins "GNU ARM C/C++ Cross Compiler" and "GNU ARM C/C++ J-Link Debugging" from http://gnuarmeclipse.sourceforge.net/updates.
In window > preferences
  Go to C/C++->Build->Worskpace Tools Paths and set "Build tools folder" to "C:\Program Files (x86)\GnuWin32\bin"
    and "Toolchain folder" to "C:\Program Files (x86)\GNU Tools ARM Embedded\4.9 2015q3\bin".
  Go to C/C++->Build->Environment, click on the "Add..." button, set "Name" to "PATH" and "Value" to "C:\Program Files (x86)\GNU Tools ARM Embedded\4.9 2015q3\bin".
  Go to C/C++->Debug->EmbSys Register View, in "Architecture" select "cortex-m0", in "Vendor" select "Nordic", in "Chip" select "nrf51".
In window > Show view > Others..., select Debug > EmbSys Registers.

Open C:\nrf51workspace\nRF51_SDK_8.1.0\components\toolchain\gcc\Makefile.windows in Notepad++
  Replace: GNU_INSTALL_ROOT := $(PROGFILES)/GNU Tools ARM Embedded/4.9 2015q1
  By: GNU_INSTALL_ROOT := C:\Program Files (x86)\GNU Tools ARM Embedded\4.9 2015q3
Download https://devzone.nordicsemi.com/attachment/b6f3efb4657b28fc5a549f647c53f269 (the link ble_app_hrs_SDK8_0_0.zip from the tutorial).
Unzip ble_app_hrs_SDK8_0_0.zip into C:\nrf51workspace\nRF51_SDK_8.1.0\examples\ble_peripheral\ble_app_hrs\pca10028\s110 (replace the armgcc folder)
  but do not replace the files "ble_app_hrs_gcc_nrf51.ld" and "Makefile".

In Eclipse, go to file->import->Existing Projects into Workspace, 
  in "select root directory" put "C:\nrf51workspace\nRF51_SDK_8.1.0\examples\ble_peripheral\ble_app_hrs\pca10028\s110\armgcc"
  Click on "finish".
Hit CTRL+B and the project will normally be compiled with success (if not, make sure the files "ble_app_hrs_gcc_nrf51.ld" and "Makefile" were not erased when
  you unzipped ble_app_hrs_SDK8_0_0.zip).

Edit "Makefile":
  Replace "CFLAGS += -Wall -Werror -O3" by "CFLAGS += -Wall -Werror -O0 -g3"
  Replace "CFLAGS += -fno-builtin --short-enums" by "CFLAGS += --short-enums"
  Search for the $(NO_ECHO)$(CC) $(CFLAGS) $(INC_PATHS) -c -o $@ $< line in the makefile and add @echo arm-none-eabi-gcc $(CFLAGS) $(INC_PATHS) -c -o $@ $< on the line above.

To solve some missing header file errors, right-click on the project > properties, select "C/C++ General > Preprocessor Include Paths, Macros etc.".
  In "Languages" select "GNU C", in "Setting Entries" select "CDT User Setting Entries" and click on "Add...".
  The following file system paths must be added:
    C:\nrf51workspace\nRF51_SDK_8.1.0\components\drivers_nrf\hal
    C:\nrf51workspace\nRF51_SDK_8.1.0\components\libraries\util
    C:\nrf51workspace\nRF51_SDK_8.1.0\components\softdevice\s110\headers

Hit CTRL+B to rebuild then right click the project and click Index > Rebuild to solve all symbol errors.

Plug the Nrf51-DK, start it on the bootloader mode (press reset when switching it on), and copy "nRF51-DK-J-Link-IF" from https://www.nordicsemi.com/eng/Products/nRF51-DK.
Setup "nRFgo Studio-Win64" from https://www.nordicsemi.com/eng/Products/nRF51-DK.
Download "S110-SD-v8" from https://www.nordicsemi.com/eng/Products/nRF51-DK and program the Softdevice "s110_nrf51_8.0.0_softdevice.hex" with nRFgo Studio.

In the makefile, under "flash_softdevice: ", replace "nrfjprog --reset --program ../../../../../../components/softdevice/s110/hex/s110_softdevice.hex" by:
	nrfjprog --eraseall
	nrfjprog --program ../../../../../../components/softdevice/s110/hex/s110_softdevice.hex
	nrfjprog --reset
Right-click on the project, choose "Make Targets > Build...", select "flash_softdevice" and click on "Build".
In the makefile, under "flash: $(MAKECMDGOALS)", replace "nrfjprog --reset --program $(OUTPUT_BINARY_DIRECTORY)/$<.hex" by:
	nrfjprog --program $(OUTPUT_BINARY_DIRECTORY)/$<.hex --sectorerase
	nrfjprog --reset
Right-click on the project, choose "Make Targets > Build...", select "flash" and click on "Edit". In "Target name:" replace "flash" by "nrf51422_xxac_s110 flash".
And click "Build".

With Android, launch "nRF Toolbox" (can be setup from the PlayStore) and run "HRM" (the nrf51-DK must de detected and running).

For debugging, right-click on the project an select "Debug As > Debug Configurations...", right click on "GDB SEGGER J-Link Debugging" and select "New".
A new line "ble_app_hrs Default" must be added. Select it.
Under "C/C++ Application" write "_build\nrf51422_xxac_s110.out".
Select the debugger tab. Next to "Executable" write "C:\Program Files (x86)\SEGGER\JLink_V502\JLinkGDBServerCL.exe". Next to "Device name", put "nRF51822_xxAC".
Select the Startup tab. Un-tick the Enable SWO box.
Click on "Debug".


2-Build a binary for BLE Nano
-----------------------------

Tutorial from http://redbearlab.com/nrf51822-sdk

To run the program on the BLE Nano:
  With a terminal, go to "C:\nrf51workspace\nRF51_SDK_8.1.0\examples\ble_peripheral\ble_app_hrs\pca10028\s110\armgcc" and type the command:
  C:\Program Files (x86)\Nordic Semiconductor\nrf5x\bin\mergehex.exe --merge C:\nrf51workspace\nRF51_SDK_8.1.0\components\softdevice\s110\hex\s110_softdevice.hex \
    C:\nrf51workspace\nRF51_SDK_8.1.0\examples\ble_peripheral\ble_app_hrs\pca10028\s110\armgcc\_build\nrf51422_xxac_s110.hex --output hrs.hex
  Plug the BLE Nano and copy "hrs.hex" into the MBED drive.


3-Use the Real Time Terminal
----------------------------

WARNING: NEVER DO RESET WHEN USING THE REAL TIME TERMINAL! If not the computer will not be able to communicate with the microcontroller anymore!
If it happens, one way to restore the nRF51-DK is to restart it by pressing the reset button, load a new bootloader, restart it normally,
open nRFgo Studio, and erase the memory.

Tutorial from https://devzone.nordicsemi.com/tutorials/6/debugging-with-real-time-terminal/

Download the RTT source files from http://download.segger.com/J-Link/RTT/RTT_Implementation_141217.zip and unzip them in "C:\nrf51workspace\RTT_Implementation_141217".

In the Makefile, add the following lines at the end of the C_SOURCE_FILES declaration:
C:/nrf51workspace/RTT_Implementation_141217/RTT/SEGGER_RTT.c \
C:/nrf51workspace/RTT_Implementation_141217/RTT/SEGGER_RTT_printf.c \

In the Makefile, add the following line at the end of the INC_PATHS declaration:
INC_PATHS += -IC:/nrf51workspace/RTT_Implementation_141217/RTT

In a .c file, add:
#include "SEGGER_RTT.h"

and print lines via:
SEGGER_RTT_WriteString(0, "SEGGER Real-Time-Terminal Sample\r\n");
SEGGER_RTT_printf(0, "printf Test: %%u,       12345 : %u.\r\n", 12345);

Open the terminal from "C:\Program Files (x86)\SEGGER\JLink_V502\JLinkRTTViewer.exe" and put "nRF51822_xxAC" in the "Target Device".

Compile and run the application; the printed text should be on the terminal.
